// Code generated by MockGen. DO NOT EDIT.
// Source: Domain/Interfaces/session_repository_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/aait.backend.g5.main/backend/Domain/Models"
	gomock "github.com/golang/mock/gomock"
)

// MockSessionRepository is a mock of SessionRepository interface.
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryMockRecorder
}

// MockSessionRepositoryMockRecorder is the mock recorder for MockSessionRepository.
type MockSessionRepositoryMockRecorder struct {
	mock *MockSessionRepository
}

// NewMockSessionRepository creates a new mock instance.
func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepository) EXPECT() *MockSessionRepositoryMockRecorder {
	return m.recorder
}

// GetToken mocks base method.
func (m *MockSessionRepository) GetToken(ctx context.Context, userID string) (*models.Session, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx, userID)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockSessionRepositoryMockRecorder) GetToken(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockSessionRepository)(nil).GetToken), ctx, userID)
}

// RemoveToken mocks base method.
func (m *MockSessionRepository) RemoveToken(ctx context.Context, userID string) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveToken", ctx, userID)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// RemoveToken indicates an expected call of RemoveToken.
func (mr *MockSessionRepositoryMockRecorder) RemoveToken(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveToken", reflect.TypeOf((*MockSessionRepository)(nil).RemoveToken), ctx, userID)
}

// SaveToken mocks base method.
func (m *MockSessionRepository) SaveToken(ctx context.Context, session *models.Session) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveToken", ctx, session)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// SaveToken indicates an expected call of SaveToken.
func (mr *MockSessionRepositoryMockRecorder) SaveToken(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveToken", reflect.TypeOf((*MockSessionRepository)(nil).SaveToken), ctx, session)
}

// UpdateToken mocks base method.
func (m *MockSessionRepository) UpdateToken(ctx context.Context, session *models.Session) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToken", ctx, session)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockSessionRepositoryMockRecorder) UpdateToken(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockSessionRepository)(nil).UpdateToken), ctx, session)
}
