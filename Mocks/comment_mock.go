// Code generated by MockGen. DO NOT EDIT.
// Source: Domain/Interfaces/comment_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dtos "github.com/aait.backend.g5.main/backend/Domain/DTOs"
	models "github.com/aait.backend.g5.main/backend/Domain/Models"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockBlogCommentRepository is a mock of BlogCommentRepository interface.
type MockBlogCommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBlogCommentRepositoryMockRecorder
}

// MockBlogCommentRepositoryMockRecorder is the mock recorder for MockBlogCommentRepository.
type MockBlogCommentRepositoryMockRecorder struct {
	mock *MockBlogCommentRepository
}

// NewMockBlogCommentRepository creates a new mock instance.
func NewMockBlogCommentRepository(ctrl *gomock.Controller) *MockBlogCommentRepository {
	mock := &MockBlogCommentRepository{ctrl: ctrl}
	mock.recorder = &MockBlogCommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlogCommentRepository) EXPECT() *MockBlogCommentRepositoryMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockBlogCommentRepository) AddComment(ctx context.Context, comment models.Comment) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", ctx, comment)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// AddComment indicates an expected call of AddComment.
func (mr *MockBlogCommentRepositoryMockRecorder) AddComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockBlogCommentRepository)(nil).AddComment), ctx, comment)
}

// DeleteComment mocks base method.
func (m *MockBlogCommentRepository) DeleteComment(ctx context.Context, commentID string) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, commentID)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockBlogCommentRepositoryMockRecorder) DeleteComment(ctx, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockBlogCommentRepository)(nil).DeleteComment), ctx, commentID)
}

// DeleteComments mocks base method.
func (m *MockBlogCommentRepository) DeleteComments(ctx context.Context, blogID string) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComments", ctx, blogID)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// DeleteComments indicates an expected call of DeleteComments.
func (mr *MockBlogCommentRepositoryMockRecorder) DeleteComments(ctx, blogID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComments", reflect.TypeOf((*MockBlogCommentRepository)(nil).DeleteComments), ctx, blogID)
}

// GetComment mocks base method.
func (m *MockBlogCommentRepository) GetComment(ctx context.Context, commentID string) (*models.Comment, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", ctx, commentID)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockBlogCommentRepositoryMockRecorder) GetComment(ctx, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockBlogCommentRepository)(nil).GetComment), ctx, commentID)
}

// GetComments mocks base method.
func (m *MockBlogCommentRepository) GetComments(ctx context.Context, blogID string) ([]models.Comment, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", ctx, blogID)
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments.
func (mr *MockBlogCommentRepositoryMockRecorder) GetComments(ctx, blogID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockBlogCommentRepository)(nil).GetComments), ctx, blogID)
}

// UpdateComment mocks base method.
func (m *MockBlogCommentRepository) UpdateComment(ctx context.Context, commentID string, comment dtos.CommentUpdateRequest) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, commentID, comment)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockBlogCommentRepositoryMockRecorder) UpdateComment(ctx, commentID, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockBlogCommentRepository)(nil).UpdateComment), ctx, commentID, comment)
}

// MockBlogCommentUsecase is a mock of BlogCommentUsecase interface.
type MockBlogCommentUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockBlogCommentUsecaseMockRecorder
}

// MockBlogCommentUsecaseMockRecorder is the mock recorder for MockBlogCommentUsecase.
type MockBlogCommentUsecaseMockRecorder struct {
	mock *MockBlogCommentUsecase
}

// NewMockBlogCommentUsecase creates a new mock instance.
func NewMockBlogCommentUsecase(ctrl *gomock.Controller) *MockBlogCommentUsecase {
	mock := &MockBlogCommentUsecase{ctrl: ctrl}
	mock.recorder = &MockBlogCommentUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlogCommentUsecase) EXPECT() *MockBlogCommentUsecaseMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockBlogCommentUsecase) AddComment(ctx context.Context, comment models.Comment) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", ctx, comment)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// AddComment indicates an expected call of AddComment.
func (mr *MockBlogCommentUsecaseMockRecorder) AddComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockBlogCommentUsecase)(nil).AddComment), ctx, comment)
}

// DeleteComment mocks base method.
func (m *MockBlogCommentUsecase) DeleteComment(ctx context.Context, commentID, userID string) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, commentID, userID)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockBlogCommentUsecaseMockRecorder) DeleteComment(ctx, commentID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockBlogCommentUsecase)(nil).DeleteComment), ctx, commentID, userID)
}

// GetComment mocks base method.
func (m *MockBlogCommentUsecase) GetComment(ctx context.Context, commentID string) (*models.Comment, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", ctx, commentID)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockBlogCommentUsecaseMockRecorder) GetComment(ctx, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockBlogCommentUsecase)(nil).GetComment), ctx, commentID)
}

// GetComments mocks base method.
func (m *MockBlogCommentUsecase) GetComments(ctx context.Context, blogID string) ([]models.Comment, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", ctx, blogID)
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments.
func (mr *MockBlogCommentUsecaseMockRecorder) GetComments(ctx, blogID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockBlogCommentUsecase)(nil).GetComments), ctx, blogID)
}

// UpdateComment mocks base method.
func (m *MockBlogCommentUsecase) UpdateComment(ctx context.Context, commentID, userID string, comment dtos.CommentUpdateRequest) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, commentID, userID, comment)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockBlogCommentUsecaseMockRecorder) UpdateComment(ctx, commentID, userID, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockBlogCommentUsecase)(nil).UpdateComment), ctx, commentID, userID, comment)
}

// MockBlogCommentController is a mock of BlogCommentController interface.
type MockBlogCommentController struct {
	ctrl     *gomock.Controller
	recorder *MockBlogCommentControllerMockRecorder
}

// MockBlogCommentControllerMockRecorder is the mock recorder for MockBlogCommentController.
type MockBlogCommentControllerMockRecorder struct {
	mock *MockBlogCommentController
}

// NewMockBlogCommentController creates a new mock instance.
func NewMockBlogCommentController(ctrl *gomock.Controller) *MockBlogCommentController {
	mock := &MockBlogCommentController{ctrl: ctrl}
	mock.recorder = &MockBlogCommentControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlogCommentController) EXPECT() *MockBlogCommentControllerMockRecorder {
	return m.recorder
}

// AddCommentController mocks base method.
func (m *MockBlogCommentController) AddCommentController(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddCommentController", ctx)
}

// AddCommentController indicates an expected call of AddCommentController.
func (mr *MockBlogCommentControllerMockRecorder) AddCommentController(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommentController", reflect.TypeOf((*MockBlogCommentController)(nil).AddCommentController), ctx)
}

// DeleteCommentController mocks base method.
func (m *MockBlogCommentController) DeleteCommentController(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCommentController", ctx)
}

// DeleteCommentController indicates an expected call of DeleteCommentController.
func (mr *MockBlogCommentControllerMockRecorder) DeleteCommentController(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentController", reflect.TypeOf((*MockBlogCommentController)(nil).DeleteCommentController), ctx)
}

// GetCommentController mocks base method.
func (m *MockBlogCommentController) GetCommentController(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetCommentController", ctx)
}

// GetCommentController indicates an expected call of GetCommentController.
func (mr *MockBlogCommentControllerMockRecorder) GetCommentController(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentController", reflect.TypeOf((*MockBlogCommentController)(nil).GetCommentController), ctx)
}

// GetCommentsController mocks base method.
func (m *MockBlogCommentController) GetCommentsController(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetCommentsController", ctx)
}

// GetCommentsController indicates an expected call of GetCommentsController.
func (mr *MockBlogCommentControllerMockRecorder) GetCommentsController(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsController", reflect.TypeOf((*MockBlogCommentController)(nil).GetCommentsController), ctx)
}

// UpdateCommentController mocks base method.
func (m *MockBlogCommentController) UpdateCommentController(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCommentController", ctx)
}

// UpdateCommentController indicates an expected call of UpdateCommentController.
func (mr *MockBlogCommentControllerMockRecorder) UpdateCommentController(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommentController", reflect.TypeOf((*MockBlogCommentController)(nil).UpdateCommentController), ctx)
}
