// Code generated by MockGen. DO NOT EDIT.
// Source: Domain/Interfaces/blog__interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dtos "github.com/aait.backend.g5.main/backend/Domain/DTOs"
	models "github.com/aait.backend.g5.main/backend/Domain/Models"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockBlogRepository is a mock of BlogRepository interface.
type MockBlogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBlogRepositoryMockRecorder
}

// MockBlogRepositoryMockRecorder is the mock recorder for MockBlogRepository.
type MockBlogRepositoryMockRecorder struct {
	mock *MockBlogRepository
}

// NewMockBlogRepository creates a new mock instance.
func NewMockBlogRepository(ctrl *gomock.Controller) *MockBlogRepository {
	mock := &MockBlogRepository{ctrl: ctrl}
	mock.recorder = &MockBlogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlogRepository) EXPECT() *MockBlogRepositoryMockRecorder {
	return m.recorder
}

// CreateBlog mocks base method.
func (m *MockBlogRepository) CreateBlog(ctx context.Context, blog *models.Blog) (*models.Blog, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlog", ctx, blog)
	ret0, _ := ret[0].(*models.Blog)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// CreateBlog indicates an expected call of CreateBlog.
func (mr *MockBlogRepositoryMockRecorder) CreateBlog(ctx, blog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlog", reflect.TypeOf((*MockBlogRepository)(nil).CreateBlog), ctx, blog)
}

// DeleteBlog mocks base method.
func (m *MockBlogRepository) DeleteBlog(ctx context.Context, id string) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlog", ctx, id)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// DeleteBlog indicates an expected call of DeleteBlog.
func (mr *MockBlogRepositoryMockRecorder) DeleteBlog(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlog", reflect.TypeOf((*MockBlogRepository)(nil).DeleteBlog), ctx, id)
}

// GetBlog mocks base method.
func (m *MockBlogRepository) GetBlog(ctx context.Context, id string) (*models.Blog, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlog", ctx, id)
	ret0, _ := ret[0].(*models.Blog)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetBlog indicates an expected call of GetBlog.
func (mr *MockBlogRepositoryMockRecorder) GetBlog(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlog", reflect.TypeOf((*MockBlogRepository)(nil).GetBlog), ctx, id)
}

// GetBlogs mocks base method.
func (m *MockBlogRepository) GetBlogs(ctx context.Context, page int) ([]*models.Blog, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlogs", ctx, page)
	ret0, _ := ret[0].([]*models.Blog)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetBlogs indicates an expected call of GetBlogs.
func (mr *MockBlogRepositoryMockRecorder) GetBlogs(ctx, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlogs", reflect.TypeOf((*MockBlogRepository)(nil).GetBlogs), ctx, page)
}

// GetPopularity mocks base method.
func (m *MockBlogRepository) GetPopularity(ctx context.Context, blogID string) (*models.Popularity, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPopularity", ctx, blogID)
	ret0, _ := ret[0].(*models.Popularity)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetPopularity indicates an expected call of GetPopularity.
func (mr *MockBlogRepositoryMockRecorder) GetPopularity(ctx, blogID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPopularity", reflect.TypeOf((*MockBlogRepository)(nil).GetPopularity), ctx, blogID)
}

// IncreaseView mocks base method.
func (m *MockBlogRepository) IncreaseView(ctx context.Context, blogID string) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseView", ctx, blogID)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// IncreaseView indicates an expected call of IncreaseView.
func (mr *MockBlogRepositoryMockRecorder) IncreaseView(ctx, blogID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseView", reflect.TypeOf((*MockBlogRepository)(nil).IncreaseView), ctx, blogID)
}

// SearchBlogs mocks base method.
func (m *MockBlogRepository) SearchBlogs(ctx context.Context, filter dtos.FilterBlogRequest) ([]*models.Blog, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBlogs", ctx, filter)
	ret0, _ := ret[0].([]*models.Blog)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// SearchBlogs indicates an expected call of SearchBlogs.
func (mr *MockBlogRepositoryMockRecorder) SearchBlogs(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBlogs", reflect.TypeOf((*MockBlogRepository)(nil).SearchBlogs), ctx, filter)
}

// UpdateBlog mocks base method.
func (m *MockBlogRepository) UpdateBlog(ctx context.Context, blogID string, blog *models.Blog) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlog", ctx, blogID, blog)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// UpdateBlog indicates an expected call of UpdateBlog.
func (mr *MockBlogRepositoryMockRecorder) UpdateBlog(ctx, blogID, blog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlog", reflect.TypeOf((*MockBlogRepository)(nil).UpdateBlog), ctx, blogID, blog)
}

// MockBlogUsecase is a mock of BlogUsecase interface.
type MockBlogUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockBlogUsecaseMockRecorder
}

// MockBlogUsecaseMockRecorder is the mock recorder for MockBlogUsecase.
type MockBlogUsecaseMockRecorder struct {
	mock *MockBlogUsecase
}

// NewMockBlogUsecase creates a new mock instance.
func NewMockBlogUsecase(ctrl *gomock.Controller) *MockBlogUsecase {
	mock := &MockBlogUsecase{ctrl: ctrl}
	mock.recorder = &MockBlogUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlogUsecase) EXPECT() *MockBlogUsecaseMockRecorder {
	return m.recorder
}

// CreateBlog mocks base method.
func (m *MockBlogUsecase) CreateBlog(ctx context.Context, blog *models.Blog) (*dtos.BlogResponse, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlog", ctx, blog)
	ret0, _ := ret[0].(*dtos.BlogResponse)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// CreateBlog indicates an expected call of CreateBlog.
func (mr *MockBlogUsecaseMockRecorder) CreateBlog(ctx, blog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlog", reflect.TypeOf((*MockBlogUsecase)(nil).CreateBlog), ctx, blog)
}

// DeleteBlog mocks base method.
func (m *MockBlogUsecase) DeleteBlog(ctx context.Context, deleteBlogReq dtos.DeleteBlogRequest) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlog", ctx, deleteBlogReq)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// DeleteBlog indicates an expected call of DeleteBlog.
func (mr *MockBlogUsecaseMockRecorder) DeleteBlog(ctx, deleteBlogReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlog", reflect.TypeOf((*MockBlogUsecase)(nil).DeleteBlog), ctx, deleteBlogReq)
}

// GetBlog mocks base method.
func (m *MockBlogUsecase) GetBlog(ctx context.Context, id string) (*dtos.BlogResponse, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlog", ctx, id)
	ret0, _ := ret[0].(*dtos.BlogResponse)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetBlog indicates an expected call of GetBlog.
func (mr *MockBlogUsecaseMockRecorder) GetBlog(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlog", reflect.TypeOf((*MockBlogUsecase)(nil).GetBlog), ctx, id)
}

// GetBlogs mocks base method.
func (m *MockBlogUsecase) GetBlogs(ctx context.Context, page int) ([]*dtos.BlogResponse, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlogs", ctx, page)
	ret0, _ := ret[0].([]*dtos.BlogResponse)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetBlogs indicates an expected call of GetBlogs.
func (mr *MockBlogUsecaseMockRecorder) GetBlogs(ctx, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlogs", reflect.TypeOf((*MockBlogUsecase)(nil).GetBlogs), ctx, page)
}

// SearchBlogs mocks base method.
func (m *MockBlogUsecase) SearchBlogs(ctx context.Context, filter dtos.FilterBlogRequest) ([]*dtos.BlogResponse, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBlogs", ctx, filter)
	ret0, _ := ret[0].([]*dtos.BlogResponse)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// SearchBlogs indicates an expected call of SearchBlogs.
func (mr *MockBlogUsecaseMockRecorder) SearchBlogs(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBlogs", reflect.TypeOf((*MockBlogUsecase)(nil).SearchBlogs), ctx, filter)
}

// TrackPopularity mocks base method.
func (m *MockBlogUsecase) TrackPopularity(ctx context.Context, popularity dtos.TrackPopularityRequest) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackPopularity", ctx, popularity)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// TrackPopularity indicates an expected call of TrackPopularity.
func (mr *MockBlogUsecaseMockRecorder) TrackPopularity(ctx, popularity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackPopularity", reflect.TypeOf((*MockBlogUsecase)(nil).TrackPopularity), ctx, popularity)
}

// UpdateBlog mocks base method.
func (m *MockBlogUsecase) UpdateBlog(ctx context.Context, blogID string, blog *models.Blog) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlog", ctx, blogID, blog)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// UpdateBlog indicates an expected call of UpdateBlog.
func (mr *MockBlogUsecaseMockRecorder) UpdateBlog(ctx, blogID, blog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlog", reflect.TypeOf((*MockBlogUsecase)(nil).UpdateBlog), ctx, blogID, blog)
}

// MockBlogController is a mock of BlogController interface.
type MockBlogController struct {
	ctrl     *gomock.Controller
	recorder *MockBlogControllerMockRecorder
}

// MockBlogControllerMockRecorder is the mock recorder for MockBlogController.
type MockBlogControllerMockRecorder struct {
	mock *MockBlogController
}

// NewMockBlogController creates a new mock instance.
func NewMockBlogController(ctrl *gomock.Controller) *MockBlogController {
	mock := &MockBlogController{ctrl: ctrl}
	mock.recorder = &MockBlogControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlogController) EXPECT() *MockBlogControllerMockRecorder {
	return m.recorder
}

// CreateBlogController mocks base method.
func (m *MockBlogController) CreateBlogController(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateBlogController", ctx)
}

// CreateBlogController indicates an expected call of CreateBlogController.
func (mr *MockBlogControllerMockRecorder) CreateBlogController(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlogController", reflect.TypeOf((*MockBlogController)(nil).CreateBlogController), ctx)
}

// DeleteBlogController mocks base method.
func (m *MockBlogController) DeleteBlogController(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteBlogController", ctx)
}

// DeleteBlogController indicates an expected call of DeleteBlogController.
func (mr *MockBlogControllerMockRecorder) DeleteBlogController(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlogController", reflect.TypeOf((*MockBlogController)(nil).DeleteBlogController), ctx)
}

// GetBlogController mocks base method.
func (m *MockBlogController) GetBlogController(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetBlogController", ctx)
}

// GetBlogController indicates an expected call of GetBlogController.
func (mr *MockBlogControllerMockRecorder) GetBlogController(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlogController", reflect.TypeOf((*MockBlogController)(nil).GetBlogController), ctx)
}

// GetBlogsController mocks base method.
func (m *MockBlogController) GetBlogsController(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetBlogsController", ctx)
}

// GetBlogsController indicates an expected call of GetBlogsController.
func (mr *MockBlogControllerMockRecorder) GetBlogsController(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlogsController", reflect.TypeOf((*MockBlogController)(nil).GetBlogsController), ctx)
}

// SearchBlogsController mocks base method.
func (m *MockBlogController) SearchBlogsController(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SearchBlogsController", ctx)
}

// SearchBlogsController indicates an expected call of SearchBlogsController.
func (mr *MockBlogControllerMockRecorder) SearchBlogsController(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBlogsController", reflect.TypeOf((*MockBlogController)(nil).SearchBlogsController), ctx)
}

// TrackPopularityController mocks base method.
func (m *MockBlogController) TrackPopularityController(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrackPopularityController", ctx)
}

// TrackPopularityController indicates an expected call of TrackPopularityController.
func (mr *MockBlogControllerMockRecorder) TrackPopularityController(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackPopularityController", reflect.TypeOf((*MockBlogController)(nil).TrackPopularityController), ctx)
}

// UpdateBlogController mocks base method.
func (m *MockBlogController) UpdateBlogController(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateBlogController", ctx)
}

// UpdateBlogController indicates an expected call of UpdateBlogController.
func (mr *MockBlogControllerMockRecorder) UpdateBlogController(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlogController", reflect.TypeOf((*MockBlogController)(nil).UpdateBlogController), ctx)
}

// MockBlogPopularityActionRepository is a mock of BlogPopularityActionRepository interface.
type MockBlogPopularityActionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBlogPopularityActionRepositoryMockRecorder
}

// MockBlogPopularityActionRepositoryMockRecorder is the mock recorder for MockBlogPopularityActionRepository.
type MockBlogPopularityActionRepositoryMockRecorder struct {
	mock *MockBlogPopularityActionRepository
}

// NewMockBlogPopularityActionRepository creates a new mock instance.
func NewMockBlogPopularityActionRepository(ctrl *gomock.Controller) *MockBlogPopularityActionRepository {
	mock := &MockBlogPopularityActionRepository{ctrl: ctrl}
	mock.recorder = &MockBlogPopularityActionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlogPopularityActionRepository) EXPECT() *MockBlogPopularityActionRepositoryMockRecorder {
	return m.recorder
}

// Dislike mocks base method.
func (m *MockBlogPopularityActionRepository) Dislike(ctx context.Context, popularity dtos.TrackPopularityRequest) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dislike", ctx, popularity)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// Dislike indicates an expected call of Dislike.
func (mr *MockBlogPopularityActionRepositoryMockRecorder) Dislike(ctx, popularity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dislike", reflect.TypeOf((*MockBlogPopularityActionRepository)(nil).Dislike), ctx, popularity)
}

// GetBlogPopularityAction mocks base method.
func (m *MockBlogPopularityActionRepository) GetBlogPopularityAction(ctx context.Context, blogID, userID string) (*models.PopularityAction, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlogPopularityAction", ctx, blogID, userID)
	ret0, _ := ret[0].(*models.PopularityAction)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetBlogPopularityAction indicates an expected call of GetBlogPopularityAction.
func (mr *MockBlogPopularityActionRepositoryMockRecorder) GetBlogPopularityAction(ctx, blogID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlogPopularityAction", reflect.TypeOf((*MockBlogPopularityActionRepository)(nil).GetBlogPopularityAction), ctx, blogID, userID)
}

// Like mocks base method.
func (m *MockBlogPopularityActionRepository) Like(ctx context.Context, popularity dtos.TrackPopularityRequest) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Like", ctx, popularity)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// Like indicates an expected call of Like.
func (mr *MockBlogPopularityActionRepositoryMockRecorder) Like(ctx, popularity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Like", reflect.TypeOf((*MockBlogPopularityActionRepository)(nil).Like), ctx, popularity)
}

// UndoDislike mocks base method.
func (m *MockBlogPopularityActionRepository) UndoDislike(ctx context.Context, popularity dtos.TrackPopularityRequest) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndoDislike", ctx, popularity)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// UndoDislike indicates an expected call of UndoDislike.
func (mr *MockBlogPopularityActionRepositoryMockRecorder) UndoDislike(ctx, popularity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndoDislike", reflect.TypeOf((*MockBlogPopularityActionRepository)(nil).UndoDislike), ctx, popularity)
}

// UndoLike mocks base method.
func (m *MockBlogPopularityActionRepository) UndoLike(ctx context.Context, popularity dtos.TrackPopularityRequest) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndoLike", ctx, popularity)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// UndoLike indicates an expected call of UndoLike.
func (mr *MockBlogPopularityActionRepositoryMockRecorder) UndoLike(ctx, popularity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndoLike", reflect.TypeOf((*MockBlogPopularityActionRepository)(nil).UndoLike), ctx, popularity)
}

// MockBlogHelper is a mock of BlogHelper interface.
type MockBlogHelper struct {
	ctrl     *gomock.Controller
	recorder *MockBlogHelperMockRecorder
}

// MockBlogHelperMockRecorder is the mock recorder for MockBlogHelper.
type MockBlogHelperMockRecorder struct {
	mock *MockBlogHelper
}

// NewMockBlogHelper creates a new mock instance.
func NewMockBlogHelper(ctrl *gomock.Controller) *MockBlogHelper {
	mock := &MockBlogHelper{ctrl: ctrl}
	mock.recorder = &MockBlogHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlogHelper) EXPECT() *MockBlogHelperMockRecorder {
	return m.recorder
}

// CreateSlug mocks base method.
func (m *MockBlogHelper) CreateSlug(blogTitle string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSlug", blogTitle)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateSlug indicates an expected call of CreateSlug.
func (mr *MockBlogHelperMockRecorder) CreateSlug(blogTitle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlug", reflect.TypeOf((*MockBlogHelper)(nil).CreateSlug), blogTitle)
}

// FetchComments mocks base method.
func (m *MockBlogHelper) FetchComments(ctx context.Context, blogID string) ([]models.Comment, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchComments", ctx, blogID)
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// FetchComments indicates an expected call of FetchComments.
func (mr *MockBlogHelperMockRecorder) FetchComments(ctx, blogID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchComments", reflect.TypeOf((*MockBlogHelper)(nil).FetchComments), ctx, blogID)
}

// FetchFromCacheOrRepo mocks base method.
func (m *MockBlogHelper) FetchFromCacheOrRepo(ctx context.Context, cacheKey string, fetchFromRepo func() (interface{}, *models.ErrorResponse)) (interface{}, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFromCacheOrRepo", ctx, cacheKey, fetchFromRepo)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// FetchFromCacheOrRepo indicates an expected call of FetchFromCacheOrRepo.
func (mr *MockBlogHelperMockRecorder) FetchFromCacheOrRepo(ctx, cacheKey, fetchFromRepo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFromCacheOrRepo", reflect.TypeOf((*MockBlogHelper)(nil).FetchFromCacheOrRepo), ctx, cacheKey, fetchFromRepo)
}

// FetchFromCacheOrRepoBlogs mocks base method.
func (m *MockBlogHelper) FetchFromCacheOrRepoBlogs(ctx context.Context, cacheKey string, fetchFromRepo func() (interface{}, *models.ErrorResponse)) (interface{}, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFromCacheOrRepoBlogs", ctx, cacheKey, fetchFromRepo)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// FetchFromCacheOrRepoBlogs indicates an expected call of FetchFromCacheOrRepoBlogs.
func (mr *MockBlogHelperMockRecorder) FetchFromCacheOrRepoBlogs(ctx, cacheKey, fetchFromRepo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFromCacheOrRepoBlogs", reflect.TypeOf((*MockBlogHelper)(nil).FetchFromCacheOrRepoBlogs), ctx, cacheKey, fetchFromRepo)
}

// FetchPopularity mocks base method.
func (m *MockBlogHelper) FetchPopularity(ctx context.Context, blogID string) (*models.Popularity, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPopularity", ctx, blogID)
	ret0, _ := ret[0].(*models.Popularity)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// FetchPopularity indicates an expected call of FetchPopularity.
func (mr *MockBlogHelperMockRecorder) FetchPopularity(ctx, blogID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPopularity", reflect.TypeOf((*MockBlogHelper)(nil).FetchPopularity), ctx, blogID)
}

// GetBlogs mocks base method.
func (m *MockBlogHelper) GetBlogs(ctx context.Context, data []*models.Blog) ([]*dtos.BlogResponse, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlogs", ctx, data)
	ret0, _ := ret[0].([]*dtos.BlogResponse)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetBlogs indicates an expected call of GetBlogs.
func (mr *MockBlogHelperMockRecorder) GetBlogs(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlogs", reflect.TypeOf((*MockBlogHelper)(nil).GetBlogs), ctx, data)
}

// Marshal mocks base method.
func (m *MockBlogHelper) Marshal(data interface{}) (string, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockBlogHelperMockRecorder) Marshal(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockBlogHelper)(nil).Marshal), data)
}

// Unmarshal mocks base method.
func (m *MockBlogHelper) Unmarshal(dataJSON string, result interface{}) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", dataJSON, result)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockBlogHelperMockRecorder) Unmarshal(dataJSON, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockBlogHelper)(nil).Unmarshal), dataJSON, result)
}
