// Code generated by MockGen. DO NOT EDIT.
// Source: Domain/Interfaces/password_service_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/aait.backend.g5.main/backend/Domain/Models"
	gomock "github.com/golang/mock/gomock"
)

// MockPasswordService is a mock of PasswordService interface.
type MockPasswordService struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordServiceMockRecorder
}

// MockPasswordServiceMockRecorder is the mock recorder for MockPasswordService.
type MockPasswordServiceMockRecorder struct {
	mock *MockPasswordService
}

// NewMockPasswordService creates a new mock instance.
func NewMockPasswordService(ctrl *gomock.Controller) *MockPasswordService {
	mock := &MockPasswordService{ctrl: ctrl}
	mock.recorder = &MockPasswordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordService) EXPECT() *MockPasswordServiceMockRecorder {
	return m.recorder
}

// EncryptPassword mocks base method.
func (m *MockPasswordService) EncryptPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptPassword indicates an expected call of EncryptPassword.
func (mr *MockPasswordServiceMockRecorder) EncryptPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptPassword", reflect.TypeOf((*MockPasswordService)(nil).EncryptPassword), password)
}

// ValidatePassword mocks base method.
func (m *MockPasswordService) ValidatePassword(password, hashedPassword string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePassword", password, hashedPassword)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidatePassword indicates an expected call of ValidatePassword.
func (mr *MockPasswordServiceMockRecorder) ValidatePassword(password, hashedPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePassword", reflect.TypeOf((*MockPasswordService)(nil).ValidatePassword), password, hashedPassword)
}

// ValidatePasswordStrength mocks base method.
func (m *MockPasswordService) ValidatePasswordStrength(password string) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePasswordStrength", password)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// ValidatePasswordStrength indicates an expected call of ValidatePasswordStrength.
func (mr *MockPasswordServiceMockRecorder) ValidatePasswordStrength(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePasswordStrength", reflect.TypeOf((*MockPasswordService)(nil).ValidatePasswordStrength), password)
}

// MockPasswordUsecase is a mock of PasswordUsecase interface.
type MockPasswordUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordUsecaseMockRecorder
}

// MockPasswordUsecaseMockRecorder is the mock recorder for MockPasswordUsecase.
type MockPasswordUsecaseMockRecorder struct {
	mock *MockPasswordUsecase
}

// NewMockPasswordUsecase creates a new mock instance.
func NewMockPasswordUsecase(ctrl *gomock.Controller) *MockPasswordUsecase {
	mock := &MockPasswordUsecase{ctrl: ctrl}
	mock.recorder = &MockPasswordUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordUsecase) EXPECT() *MockPasswordUsecaseMockRecorder {
	return m.recorder
}

// GenerateResetURL mocks base method.
func (m *MockPasswordUsecase) GenerateResetURL(ctx context.Context, email string) (string, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateResetURL", ctx, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GenerateResetURL indicates an expected call of GenerateResetURL.
func (mr *MockPasswordUsecaseMockRecorder) GenerateResetURL(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateResetURL", reflect.TypeOf((*MockPasswordUsecase)(nil).GenerateResetURL), ctx, email)
}

// SendResetEmail mocks base method.
func (m *MockPasswordUsecase) SendResetEmail(ctx context.Context, email, resetURL string) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResetEmail", ctx, email, resetURL)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// SendResetEmail indicates an expected call of SendResetEmail.
func (mr *MockPasswordUsecaseMockRecorder) SendResetEmail(ctx, email, resetURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResetEmail", reflect.TypeOf((*MockPasswordUsecase)(nil).SendResetEmail), ctx, email, resetURL)
}

// SetNewUserPassword mocks base method.
func (m *MockPasswordUsecase) SetNewUserPassword(ctx context.Context, shortURlCode, password string) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNewUserPassword", ctx, shortURlCode, password)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// SetNewUserPassword indicates an expected call of SetNewUserPassword.
func (mr *MockPasswordUsecaseMockRecorder) SetNewUserPassword(ctx, shortURlCode, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNewUserPassword", reflect.TypeOf((*MockPasswordUsecase)(nil).SetNewUserPassword), ctx, shortURlCode, password)
}

// SetUpdateUserPassword mocks base method.
func (m *MockPasswordUsecase) SetUpdateUserPassword(ctx context.Context, shortURlCode, password string) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUpdateUserPassword", ctx, shortURlCode, password)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// SetUpdateUserPassword indicates an expected call of SetUpdateUserPassword.
func (mr *MockPasswordUsecaseMockRecorder) SetUpdateUserPassword(ctx, shortURlCode, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpdateUserPassword", reflect.TypeOf((*MockPasswordUsecase)(nil).SetUpdateUserPassword), ctx, shortURlCode, password)
}
