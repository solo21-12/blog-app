// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	dtos "github.com/aait.backend.g5.main/backend/Domain/DTOs"

	mock "github.com/stretchr/testify/mock"

	models "github.com/aait.backend.g5.main/backend/Domain/Models"
)

// BlogCommentUsecase is an autogenerated mock type for the BlogCommentUsecase type
type BlogCommentUsecase struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: ctx, comment
func (_m *BlogCommentUsecase) AddComment(ctx context.Context, comment models.Comment) *models.ErrorResponse {
	ret := _m.Called(ctx, comment)

	var r0 *models.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, models.Comment) *models.ErrorResponse); ok {
		r0 = rf(ctx, comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ErrorResponse)
		}
	}

	return r0
}

// DeleteComment provides a mock function with given fields: ctx, commentID, userID
func (_m *BlogCommentUsecase) DeleteComment(ctx context.Context, commentID string, userID string) *models.ErrorResponse {
	ret := _m.Called(ctx, commentID, userID)

	var r0 *models.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.ErrorResponse); ok {
		r0 = rf(ctx, commentID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ErrorResponse)
		}
	}

	return r0
}

// GetComment provides a mock function with given fields: ctx, commentID
func (_m *BlogCommentUsecase) GetComment(ctx context.Context, commentID string) (*models.Comment, *models.ErrorResponse) {
	ret := _m.Called(ctx, commentID)

	var r0 *models.Comment
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Comment); ok {
		r0 = rf(ctx, commentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Comment)
		}
	}

	var r1 *models.ErrorResponse
	if rf, ok := ret.Get(1).(func(context.Context, string) *models.ErrorResponse); ok {
		r1 = rf(ctx, commentID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ErrorResponse)
		}
	}

	return r0, r1
}

// GetComments provides a mock function with given fields: ctx, blogID
func (_m *BlogCommentUsecase) GetComments(ctx context.Context, blogID string) ([]models.Comment, *models.ErrorResponse) {
	ret := _m.Called(ctx, blogID)

	var r0 []models.Comment
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Comment); ok {
		r0 = rf(ctx, blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Comment)
		}
	}

	var r1 *models.ErrorResponse
	if rf, ok := ret.Get(1).(func(context.Context, string) *models.ErrorResponse); ok {
		r1 = rf(ctx, blogID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ErrorResponse)
		}
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: ctx, commentID, userID, comment
func (_m *BlogCommentUsecase) UpdateComment(ctx context.Context, commentID string, userID string, comment dtos.CommentUpdateRequest) *models.ErrorResponse {
	ret := _m.Called(ctx, commentID, userID, comment)

	var r0 *models.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, dtos.CommentUpdateRequest) *models.ErrorResponse); ok {
		r0 = rf(ctx, commentID, userID, comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ErrorResponse)
		}
	}

	return r0
}

type mockConstructorTestingTNewBlogCommentUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewBlogCommentUsecase creates a new instance of BlogCommentUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBlogCommentUsecase(t mockConstructorTestingTNewBlogCommentUsecase) *BlogCommentUsecase {
	mock := &BlogCommentUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
