// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	dtos "github.com/aait.backend.g5.main/backend/Domain/DTOs"

	mock "github.com/stretchr/testify/mock"

	models "github.com/aait.backend.g5.main/backend/Domain/Models"
)

// LoginUsecase is an autogenerated mock type for the LoginUsecase type
type LoginUsecase struct {
	mock.Mock
}

// GenerateAccessToken provides a mock function with given fields: user, expiry
func (_m *LoginUsecase) GenerateAccessToken(user *models.User, expiry int) (string, *models.ErrorResponse) {
	ret := _m.Called(user, expiry)

	var r0 string
	if rf, ok := ret.Get(0).(func(*models.User, int) string); ok {
		r0 = rf(user, expiry)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *models.ErrorResponse
	if rf, ok := ret.Get(1).(func(*models.User, int) *models.ErrorResponse); ok {
		r1 = rf(user, expiry)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ErrorResponse)
		}
	}

	return r0, r1
}

// GenerateRefreshToken provides a mock function with given fields: user, expiry
func (_m *LoginUsecase) GenerateRefreshToken(user *models.User, expiry int) (string, *models.ErrorResponse) {
	ret := _m.Called(user, expiry)

	var r0 string
	if rf, ok := ret.Get(0).(func(*models.User, int) string); ok {
		r0 = rf(user, expiry)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *models.ErrorResponse
	if rf, ok := ret.Get(1).(func(*models.User, int) *models.ErrorResponse); ok {
		r1 = rf(user, expiry)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ErrorResponse)
		}
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: ctx, userReqest
func (_m *LoginUsecase) LoginUser(ctx context.Context, userReqest dtos.LoginRequest) (*dtos.LoginResponse, *models.ErrorResponse) {
	ret := _m.Called(ctx, userReqest)

	var r0 *dtos.LoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, dtos.LoginRequest) *dtos.LoginResponse); ok {
		r0 = rf(ctx, userReqest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.LoginResponse)
		}
	}

	var r1 *models.ErrorResponse
	if rf, ok := ret.Get(1).(func(context.Context, dtos.LoginRequest) *models.ErrorResponse); ok {
		r1 = rf(ctx, userReqest)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ErrorResponse)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewLoginUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewLoginUsecase creates a new instance of LoginUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLoginUsecase(t mockConstructorTestingTNewLoginUsecase) *LoginUsecase {
	mock := &LoginUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
