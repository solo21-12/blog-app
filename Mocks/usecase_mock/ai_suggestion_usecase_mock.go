// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "github.com/aait.backend.g5.main/backend/Domain/Models"
	mock "github.com/stretchr/testify/mock"
)

// AIContentSuggestionUsecase is an autogenerated mock type for the AIContentSuggestionUsecase type
type AIContentSuggestionUsecase struct {
	mock.Mock
}

// ImproveBlogContent provides a mock function with given fields: blogID
func (_m *AIContentSuggestionUsecase) ImproveBlogContent(blogID string) ([]string, *models.ErrorResponse) {
	ret := _m.Called(blogID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 *models.ErrorResponse
	if rf, ok := ret.Get(1).(func(string) *models.ErrorResponse); ok {
		r1 = rf(blogID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ErrorResponse)
		}
	}

	return r0, r1
}

// SuggestContent provides a mock function with given fields: AI_query
func (_m *AIContentSuggestionUsecase) SuggestContent(AI_query string) ([]string, *models.ErrorResponse) {
	ret := _m.Called(AI_query)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(AI_query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 *models.ErrorResponse
	if rf, ok := ret.Get(1).(func(string) *models.ErrorResponse); ok {
		r1 = rf(AI_query)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ErrorResponse)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewAIContentSuggestionUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewAIContentSuggestionUsecase creates a new instance of AIContentSuggestionUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAIContentSuggestionUsecase(t mockConstructorTestingTNewAIContentSuggestionUsecase) *AIContentSuggestionUsecase {
	mock := &AIContentSuggestionUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
