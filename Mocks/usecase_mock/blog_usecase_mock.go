// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	dtos "github.com/aait.backend.g5.main/backend/Domain/DTOs"

	mock "github.com/stretchr/testify/mock"

	models "github.com/aait.backend.g5.main/backend/Domain/Models"
)

// BlogUsecase is an autogenerated mock type for the BlogUsecase type
type BlogUsecase struct {
	mock.Mock
}

// CreateBlog provides a mock function with given fields: ctx, blog
func (_m *BlogUsecase) CreateBlog(ctx context.Context, blog *models.Blog) (*dtos.BlogResponse, *models.ErrorResponse) {
	ret := _m.Called(ctx, blog)

	var r0 *dtos.BlogResponse
	if rf, ok := ret.Get(0).(func(context.Context, *models.Blog) *dtos.BlogResponse); ok {
		r0 = rf(ctx, blog)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.BlogResponse)
		}
	}

	var r1 *models.ErrorResponse
	if rf, ok := ret.Get(1).(func(context.Context, *models.Blog) *models.ErrorResponse); ok {
		r1 = rf(ctx, blog)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ErrorResponse)
		}
	}

	return r0, r1
}

// DeleteBlog provides a mock function with given fields: ctx, deleteBlogReq
func (_m *BlogUsecase) DeleteBlog(ctx context.Context, deleteBlogReq dtos.DeleteBlogRequest) *models.ErrorResponse {
	ret := _m.Called(ctx, deleteBlogReq)

	var r0 *models.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, dtos.DeleteBlogRequest) *models.ErrorResponse); ok {
		r0 = rf(ctx, deleteBlogReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ErrorResponse)
		}
	}

	return r0
}

// GetBlog provides a mock function with given fields: ctx, id
func (_m *BlogUsecase) GetBlog(ctx context.Context, id string) (*dtos.BlogResponse, *models.ErrorResponse) {
	ret := _m.Called(ctx, id)

	var r0 *dtos.BlogResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *dtos.BlogResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.BlogResponse)
		}
	}

	var r1 *models.ErrorResponse
	if rf, ok := ret.Get(1).(func(context.Context, string) *models.ErrorResponse); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ErrorResponse)
		}
	}

	return r0, r1
}

// GetBlogs provides a mock function with given fields: ctx, page
func (_m *BlogUsecase) GetBlogs(ctx context.Context, page int) ([]*dtos.BlogResponse, *models.ErrorResponse) {
	ret := _m.Called(ctx, page)

	var r0 []*dtos.BlogResponse
	if rf, ok := ret.Get(0).(func(context.Context, int) []*dtos.BlogResponse); ok {
		r0 = rf(ctx, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dtos.BlogResponse)
		}
	}

	var r1 *models.ErrorResponse
	if rf, ok := ret.Get(1).(func(context.Context, int) *models.ErrorResponse); ok {
		r1 = rf(ctx, page)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ErrorResponse)
		}
	}

	return r0, r1
}

// SearchBlogs provides a mock function with given fields: ctx, filter
func (_m *BlogUsecase) SearchBlogs(ctx context.Context, filter dtos.FilterBlogRequest) ([]*dtos.BlogResponse, *models.ErrorResponse) {
	ret := _m.Called(ctx, filter)

	var r0 []*dtos.BlogResponse
	if rf, ok := ret.Get(0).(func(context.Context, dtos.FilterBlogRequest) []*dtos.BlogResponse); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dtos.BlogResponse)
		}
	}

	var r1 *models.ErrorResponse
	if rf, ok := ret.Get(1).(func(context.Context, dtos.FilterBlogRequest) *models.ErrorResponse); ok {
		r1 = rf(ctx, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ErrorResponse)
		}
	}

	return r0, r1
}

// TrackPopularity provides a mock function with given fields: ctx, popularity
func (_m *BlogUsecase) TrackPopularity(ctx context.Context, popularity dtos.TrackPopularityRequest) *models.ErrorResponse {
	ret := _m.Called(ctx, popularity)

	var r0 *models.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, dtos.TrackPopularityRequest) *models.ErrorResponse); ok {
		r0 = rf(ctx, popularity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ErrorResponse)
		}
	}

	return r0
}

// UpdateBlog provides a mock function with given fields: ctx, blogID, blog
func (_m *BlogUsecase) UpdateBlog(ctx context.Context, blogID string, blog *models.Blog) *models.ErrorResponse {
	ret := _m.Called(ctx, blogID, blog)

	var r0 *models.ErrorResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Blog) *models.ErrorResponse); ok {
		r0 = rf(ctx, blogID, blog)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ErrorResponse)
		}
	}

	return r0
}

type mockConstructorTestingTNewBlogUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewBlogUsecase creates a new instance of BlogUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBlogUsecase(t mockConstructorTestingTNewBlogUsecase) *BlogUsecase {
	mock := &BlogUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
