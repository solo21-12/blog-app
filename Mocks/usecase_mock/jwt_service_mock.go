// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "github.com/aait.backend.g5.main/backend/Domain/Models"
	mock "github.com/stretchr/testify/mock"
)

// JwtService is an autogenerated mock type for the JwtService type
type JwtService struct {
	mock.Mock
}

// CreateAccessToken provides a mock function with given fields: user, expTime
func (_m *JwtService) CreateAccessToken(user models.User, expTime int) (string, error) {
	ret := _m.Called(user, expTime)

	var r0 string
	if rf, ok := ret.Get(0).(func(models.User, int) string); ok {
		r0 = rf(user, expTime)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.User, int) error); ok {
		r1 = rf(user, expTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRefreshToken provides a mock function with given fields: user, expTime
func (_m *JwtService) CreateRefreshToken(user models.User, expTime int) (string, error) {
	ret := _m.Called(user, expTime)

	var r0 string
	if rf, ok := ret.Get(0).(func(models.User, int) string); ok {
		r0 = rf(user, expTime)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.User, int) error); ok {
		r1 = rf(user, expTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateURLToken provides a mock function with given fields: user, expTime
func (_m *JwtService) CreateURLToken(user models.User, expTime int) (string, error) {
	ret := _m.Called(user, expTime)

	var r0 string
	if rf, ok := ret.Get(0).(func(models.User, int) string); ok {
		r0 = rf(user, expTime)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.User, int) error); ok {
		r1 = rf(user, expTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateAuthHeader provides a mock function with given fields: authHeader
func (_m *JwtService) ValidateAuthHeader(authHeader string) ([]string, error) {
	ret := _m.Called(authHeader)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(authHeader)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(authHeader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: tokenStr
func (_m *JwtService) ValidateToken(tokenStr string) (*models.JWTCustome, error) {
	ret := _m.Called(tokenStr)

	var r0 *models.JWTCustome
	if rf, ok := ret.Get(0).(func(string) *models.JWTCustome); ok {
		r0 = rf(tokenStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.JWTCustome)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateURLToken provides a mock function with given fields: tokenStr
func (_m *JwtService) ValidateURLToken(tokenStr string) (*models.URLTokenCustom, error) {
	ret := _m.Called(tokenStr)

	var r0 *models.URLTokenCustom
	if rf, ok := ret.Get(0).(func(string) *models.URLTokenCustom); ok {
		r0 = rf(tokenStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.URLTokenCustom)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewJwtService interface {
	mock.TestingT
	Cleanup(func())
}

// NewJwtService creates a new instance of JwtService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJwtService(t mockConstructorTestingTNewJwtService) *JwtService {
	mock := &JwtService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
