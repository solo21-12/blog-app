// Code generated by MockGen. DO NOT EDIT.
// Source: Domain/Interfaces/user_interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dtos "github.com/aait.backend.g5.main/backend/Domain/DTOs"
	models "github.com/aait.backend.g5.main/backend/Domain/Models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, user *models.User) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUserRepository) DeleteUser(ctx context.Context, userID string) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepositoryMockRecorder) DeleteUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteUser), ctx, userID)
}

// DemoteUser mocks base method.
func (m *MockUserRepository) DemoteUser(ctx context.Context, userID string) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DemoteUser", ctx, userID)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// DemoteUser indicates an expected call of DemoteUser.
func (mr *MockUserRepositoryMockRecorder) DemoteUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DemoteUser", reflect.TypeOf((*MockUserRepository)(nil).DemoteUser), ctx, userID)
}

// GetUserByEmailOrUsername mocks base method.
func (m *MockUserRepository) GetUserByEmailOrUsername(ctx context.Context, username, email string) (*models.User, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmailOrUsername", ctx, username, email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetUserByEmailOrUsername indicates an expected call of GetUserByEmailOrUsername.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmailOrUsername(ctx, username, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailOrUsername", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmailOrUsername), ctx, username, email)
}

// GetUserByID mocks base method.
func (m *MockUserRepository) GetUserByID(ctx context.Context, id string) (*models.User, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserByID), ctx, id)
}

// GetUserByName mocks base method.
func (m *MockUserRepository) GetUserByName(ctx context.Context, name string) (*models.User, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", ctx, name)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockUserRepositoryMockRecorder) GetUserByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockUserRepository)(nil).GetUserByName), ctx, name)
}

// PromoteUser mocks base method.
func (m *MockUserRepository) PromoteUser(ctx context.Context, userID string) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoteUser", ctx, userID)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// PromoteUser indicates an expected call of PromoteUser.
func (mr *MockUserRepositoryMockRecorder) PromoteUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteUser", reflect.TypeOf((*MockUserRepository)(nil).PromoteUser), ctx, userID)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(ctx context.Context, user *models.User, id string) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user, id)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(ctx, user, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), ctx, user, id)
}

// MockPromoteDemoteUserUsecase is a mock of PromoteDemoteUserUsecase interface.
type MockPromoteDemoteUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPromoteDemoteUserUsecaseMockRecorder
}

// MockPromoteDemoteUserUsecaseMockRecorder is the mock recorder for MockPromoteDemoteUserUsecase.
type MockPromoteDemoteUserUsecaseMockRecorder struct {
	mock *MockPromoteDemoteUserUsecase
}

// NewMockPromoteDemoteUserUsecase creates a new mock instance.
func NewMockPromoteDemoteUserUsecase(ctrl *gomock.Controller) *MockPromoteDemoteUserUsecase {
	mock := &MockPromoteDemoteUserUsecase{ctrl: ctrl}
	mock.recorder = &MockPromoteDemoteUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromoteDemoteUserUsecase) EXPECT() *MockPromoteDemoteUserUsecaseMockRecorder {
	return m.recorder
}

// DemoteUser mocks base method.
func (m *MockPromoteDemoteUserUsecase) DemoteUser(ctx context.Context, userID string) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DemoteUser", ctx, userID)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// DemoteUser indicates an expected call of DemoteUser.
func (mr *MockPromoteDemoteUserUsecaseMockRecorder) DemoteUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DemoteUser", reflect.TypeOf((*MockPromoteDemoteUserUsecase)(nil).DemoteUser), ctx, userID)
}

// PromoteUser mocks base method.
func (m *MockPromoteDemoteUserUsecase) PromoteUser(ctx context.Context, userID string) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoteUser", ctx, userID)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// PromoteUser indicates an expected call of PromoteUser.
func (mr *MockPromoteDemoteUserUsecaseMockRecorder) PromoteUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteUser", reflect.TypeOf((*MockPromoteDemoteUserUsecase)(nil).PromoteUser), ctx, userID)
}

// MockUserProfileUpdateUsecase is a mock of UserProfileUpdateUsecase interface.
type MockUserProfileUpdateUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserProfileUpdateUsecaseMockRecorder
}

// MockUserProfileUpdateUsecaseMockRecorder is the mock recorder for MockUserProfileUpdateUsecase.
type MockUserProfileUpdateUsecaseMockRecorder struct {
	mock *MockUserProfileUpdateUsecase
}

// NewMockUserProfileUpdateUsecase creates a new mock instance.
func NewMockUserProfileUpdateUsecase(ctrl *gomock.Controller) *MockUserProfileUpdateUsecase {
	mock := &MockUserProfileUpdateUsecase{ctrl: ctrl}
	mock.recorder = &MockUserProfileUpdateUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserProfileUpdateUsecase) EXPECT() *MockUserProfileUpdateUsecaseMockRecorder {
	return m.recorder
}

// UpdateUserProfile mocks base method.
func (m *MockUserProfileUpdateUsecase) UpdateUserProfile(ctx context.Context, userID string, user *dtos.ProfileUpdateRequest) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", ctx, userID, user)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockUserProfileUpdateUsecaseMockRecorder) UpdateUserProfile(ctx, userID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockUserProfileUpdateUsecase)(nil).UpdateUserProfile), ctx, userID, user)
}
